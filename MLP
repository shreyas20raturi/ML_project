import sys
print('python: {}'.format(sys.version))
import scipy
print('scipy: {}'.format(scipy.version))
import numpy
print('numpy: {}'.format(numpy.version))
import matplotlib
print('matplotlib: {}'.format(matplotlib))
import pandas
print('pandas: {}'.format(pandas))
import sklearn
print('sklearn: {}'.format(sklearn))
import pandas
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier
#loading the data 
url = "https://raw.githubusercontent.com/JonathanC13/ML-Iris-dataset/master/dataset/iris.csv"
names = ['sepal-length', 'sepal-widh', 'petal-length', 'petal-width', 'class']
dataset =read_csv(url, names=names)
#dimensions of dataset
print(dataset.shape)

# take a peek at the data
print(dataset.head(20))

#stastistical summary
print(dataset.describe())

# class distribution
print(dataset.groupby('class').size())

#unvariable plots-box and whisker plots
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
pyplot.show()

#histogram of the variable
dataset.hist()
pyplot.show()

#multivariant plots
scatter_matrix(dataset)
pyplot.show()

# creating a validation set
#splitting dataset
array = dataset.values
X=array[:, 0:4]
y=array[:, 4]
X_train, X_validation, y_train, y_validation=train_test_split(X,y, test_size=0.2, random_state=1)
#logistic regression
#linear Discriminant Analysis
#K-nearest neighbors
#Classification and regression trees 
#Gaussian Naive Bayes
# Support vector mchines

#building models
models = []
models.append(('LR', LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
#evaluate the created models
results=[]
names=[]
for name, model in models:
    cv_results = cross_val_score(model, X_train, y_train, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))
    
    #compare our models
pyplot.boxplot(results, labels=names)
pyplot.title('Algorithm Comparison')
pyplot.show()

#make prdictions on svm
model = SVC(gamma='auto')
model.fit(X_train, y_train)
predictions = model.predict(X_validation)

#evaluate our predictions
print(accuracy_score(y_validation,predictions))
print(confusion_matrix(y_validation,predictions))
print(classification_report(y_validation,predictions))
